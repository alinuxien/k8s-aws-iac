---
- name: "Création du Dossier de Configuration de Kubernetes"
  file:
    path: "/etc/kubernetes/config"
    state: directory

- name: "Téléchargement des Binaires Controller"
  get_url:
    url: "{{ item }}"    
    dest: "~/"
  with_items:
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-apiserver"
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-controller-manager"
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-scheduler"
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl"

- name: "Installation des Binaires Controller"
  copy:
    src: "{{ item }}"
    dest: "/usr/local/bin"
    remote_src: yes
    mode: '0755'
  with_items:
    - "~/kube-apiserver"
    - "~/kube-controller-manager"
    - "~/kube-scheduler"
    - "~/kubectl"

- name: "Préparation du Dossier de Configuration de l'API Server"
  file:
    path: "/var/lib/kubernetes"
    state: directory

- name: "Installation des certificats et clés de l'API Server"
  copy:
    src: "{{ item }}"
    dest: "/var/lib/kubernetes"
    remote_src: yes
  with_items:
    - "~/ca.pem"
    - "~/ca-key.pem"
    - "~/kubernetes-key.pem"
    - "~/kubernetes.pem"
    - "~/service-account-key.pem"
    - "~/service-account.pem"
    - "~/encryption-config.yaml"

- name: "Create the kube-apiserver.service systemd unit file"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-apiserver \\
        --advertise-address={{ ansible_ssh_host }} \\
        --allow-privileged=true \\
        --apiserver-count=2 \\
        --audit-log-maxage=30 \\
        --audit-log-maxbackup=3 \\
        --audit-log-maxsize=100 \\
        --audit-log-path=/var/log/audit.log \\
        --authorization-mode=Node,RBAC \\
        --bind-address=0.0.0.0 \\
        --client-ca-file=/var/lib/kubernetes/ca.pem \\
        --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
        --etcd-cafile=/var/lib/kubernetes/ca.pem \\
        --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
        --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
        --etcd-servers=https://${controller-0-int-ip}:2379,https://${controller-1-int-ip}:2379 \\
        --event-ttl=1h \\
        --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
        --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
        --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
        --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
        --runtime-config='api/all=true' \\
        --service-account-key-file=/var/lib/kubernetes/service-account.pem \\
        --service-account-signing-key-file=/var/lib/kubernetes/service-account-key.pem \\
        --service-account-issuer=https://${kubernetes-public-adress}:6443 \\
        --service-cluster-ip-range=${service-cluster-ip-range} \\
        --service-node-port-range=30000-32767 \\
        --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
        --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: "Installation du KubeConfig du Controller Manager"
  copy:
    src: "~/kube-controller-manager.kubeconfig"
    dest: "/var/lib/kubernetes"
    remote_src: yes

- name: "Create the kube-controller-manager.service systemd unit file"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-controller-manager \\
        --allocate-node-cidrs=true \
        --bind-address=0.0.0.0 \\
        --cluster-cidr=${pod-cidr} \\
        --cluster-name=kubernetes \\
        --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\
        --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\
        --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \\
        --leader-elect=true \\
        --root-ca-file=/var/lib/kubernetes/ca.pem \\
        --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \\
        --service-cluster-ip-range=${service-cluster-ip-range} \\
        --use-service-account-credentials=true \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: "Installation du KubeConfig du Scheduler"
  copy:
    src: "~/kube-scheduler.kubeconfig"
    dest: "/var/lib/kubernetes"
    remote_src: yes

- name: "Create the kube-scheduler.yaml Configuration File"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/kubernetes/config/kube-scheduler.yaml
      apiVersion: kubescheduler.config.k8s.io/v1beta1
      kind: KubeSchedulerConfiguration
      clientConnection:
        kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
      leaderElection:
        leaderElect: true
      EOF

- name: "Create the kube-scheduler.service systemd unit file"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-scheduler \\
        --config=/etc/kubernetes/config/kube-scheduler.yaml \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: "Starts the Controller Services"
  ansible.builtin.systemd:
    state: started
    name: "{{ item }}"
    daemon_reload: yes
    enabled: yes
  with_items:
    - "kube-apiserver" 
    - "kube-controller-manager"
    - "kube-scheduler"

- name: "Installs CA Cert in Certs Library"
  ansible.builtin.copy:
    src: "~/ca.pem"
    dest: "/etc/ssl/certs"
    remote_src: yes

- name: "Update System CA Cert Library"
  shell: "update-ca-certificates || true"

- name: "Adds alias to node for NGINX proxy pass"
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.0\.1\tlocalhost'
    line: '127.0.0.1 localhost kubernetes.default.svc.cluster.local'

- name: "Installs NGINX"
  apt:
    name: "nginx"
    state: latest 
    update_cache: yes

- name: "Prepares HTTP Health Checks NGINX Config"
  shell: 
    cmd: |
      cat <<EOF | sudo tee ~/kubernetes.default.svc.cluster.local
      server {
        listen      80;
        server_name kubernetes.default.svc.cluster.local;

        location /healthz {
           proxy_pass                    https://127.0.0.1:6443/healthz;
           proxy_ssl_trusted_certificate /etc/ssl/certs/ca.pem;
        }
      }
      EOF

- name: "Installation du fichier de Configuration NGINX"
  copy:
    src: "~/kubernetes.default.svc.cluster.local"
    dest: "/etc/nginx/sites-available"
    remote_src: yes

- name: "Activation du fichier de Configuration NGINX"
  ansible.builtin.file:
    src: /etc/nginx/sites-available/kubernetes.default.svc.cluster.local
    dest: /etc/nginx/sites-enabled/kubernetes.default.svc.cluster.local
    state: link

- name: "Starts  NGINX"
  ansible.builtin.systemd:
    state: restarted
    name: "nginx"
    enabled: yes
 
- name: "Configuration RBAC : Cluster Role"
  shell: 
    cmd: |
      cat <<EOF | sudo kubectl apply --kubeconfig ~/admin.kubeconfig -f -
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
            - ""
          resources:
            - nodes/proxy
            - nodes/stats
            - nodes/log
            - nodes/spec
            - nodes/metrics
          verbs:
            - "*"
      EOF
  run_once: true

- name: "Configuration RBAC : Cluster Role Binding"
  shell: 
    cmd: |
      cat <<EOF | sudo kubectl apply --kubeconfig ~/admin.kubeconfig -f -
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:kube-apiserver
        namespace: ""
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:kube-apiserver-to-kubelet
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes
      EOF
  run_once: true

- name: "Adds all nodes IP in /etc/hosts"
  shell: 
    cmd: |
      cat <<EOF | sudo tee -a /etc/hosts
      ${controller-0-int-ip} controller-0 
      ${controller-1-int-ip} controller-1 
      ${worker-0-int-ip} worker-0 
      ${worker-1-int-ip} worker-1 
      EOF


