---
- name: "Install the OS Dependencies"
  apt:
    name: "{{ item }}"
    state: latest
    update_cache: yes
  with_items:
    - "socat" 
    - "conntrack" 
    - "ipset"

- name: "Disable Swap : Current Session & @Boot"
  shell: "sudo swapoff -a && sed -ri 's/swap/^#?/#/g' /etc/fstab"

- name: "Download Worker Binaries"
  get_url:
    url: "{{ item }}"    
    dest: "~/"
  with_items:
    - "https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz"
    - "https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64"
    - "https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz"
    - "https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz"
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl"
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-proxy"
    - "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet"

- name: "Create the Installation Directories"
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "/etc/cni/net.d" 
    - "/opt/cni/bin" 
    - "/var/lib/kubelet" 
    - "/var/lib/kube-proxy" 
    - "/var/lib/kubernetes" 
    - "/var/run/kubernetes" 
    - "~/containerd"

- name: "Décompression de crictl"
  unarchive:
    src: "~/crictl-v1.21.0-linux-amd64.tar.gz"
    dest: "~/"
    remote_src: yes

- name: "Décompression de containerd"
  unarchive:
    src: "~/containerd-1.4.4-linux-amd64.tar.gz"
    dest: "~/containerd"
    remote_src: yes

- name: "Décompression et Installation de CNI"
  unarchive:
    src: "~/cni-plugins-linux-amd64-v0.9.1.tgz"
    dest: "/opt/cni/bin/"
    remote_src: yes
  become: yes
  become_method: su

- name: "Rename runc"
  copy:
    src: "~/runc.amd64"
    dest: "~/runc"
    remote_src: yes

- name: "Copy worker binaries to exec path"
  copy:
    src: "{{ item }}"
    dest: "/usr/local/bin/"
    remote_src: yes
    mode: '0755'
  with_items:
    - "~/crictl"
    - "~/kubectl"
    - "~/kube-proxy"
    - "~/kubelet runc"
  become: yes
  become_method: su

- name: "Copy containerd binary to bin dir"
  copy:
    src: "~/containerd/bin/"
    dest: "/bin/"
    remote_src: yes
    mode: '0755'
  become: yes
  become_method: su

- name: "Configure CNI Networking"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/cni/net.d/10-bridge.conf
      {
        "cniVersion": "0.4.0",
        "name": "bridge",
        "type": "bridge",
        "bridge": "cnio0",
        "isGateway": true,
        "ipMasq": true,
        "ipam": {
          "type": "host-local",
          "ranges": [
            [{"subnet": "${pod-cidr}"}]
          ],
          "routes": [{"dst": "0.0.0.0/0"}]
        }
      }
      EOF

- name: "Create the loopback Network Configuration "
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/cni/net.d/99-loopback.conf
      {
        "cniVersion": "0.4.0",
        "name": "lo",
        "type": "loopback"
      }
      EOF

- name: "Create the Containerd Configuration Directory"
  file:
    path: "/etc/containerd"
    state: directory
    
- name: "Create the Containerd Configuration File"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/containerd/config.toml
      [plugins]
        [plugins.cri.containerd]
          snapshotter = "overlayfs"
          [plugins.cri.containerd.default_runtime]
            runtime_type = "io.containerd.runtime.v1.linux"
            runtime_engine = "/usr/local/bin/runc"
            runtime_root = ""
      EOF

- name: "Create the Containerd Systemd Unit File"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/systemd/system/containerd.service
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=network.target

      [Service]
      ExecStartPre=/sbin/modprobe overlay
      ExecStart=/bin/containerd
      Restart=always
      RestartSec=5
      Delegate=yes
      KillMode=process
      OOMScoreAdjust=-999
      LimitNOFILE=1048576
      LimitNPROC=infinity
      LimitCORE=infinity

      [Install]
      WantedBy=multi-user.target
      EOF 

- name: "Install Worker-0 key & certificate"
  hosts: ${worker-0-dns}
  become: yes
  become_method: su 
  copy:
    src: "{{ item }}"
    dest: "/var/lib/kubelet/"
    remote_src: yes
  with_items:
    - "~/worker-0-key.pem"
    - "~/worker-0.pem"
 
- name: "Install Worker-0 kubeconfig"
  hosts: ${worker-0-dns}
  become: yes
  become_method: su 
   copy:
    src: "~/worker-0.kubeconfig"
    dest: "/var/lib/kubelet/kubeconfig/"
    remote_src: yes

- name: "Install Worker-1 key & certificate"
  hosts: ${worker-1-dns}
  become: yes
  become_method: su 
  copy:
    src: "{{ item }}"
    dest: "/var/lib/kubelet/"
    remote_src: yes
  with_items:
    - "~/worker-1-key.pem"
    - "~/worker-1.pem"

- name: "Install Worker-1 kubeconfig"
  hosts: ${worker-1-dns}
  become: yes
  become_method: su 
  copy:
    src: "~/worker-1.kubeconfig"
    dest: "/var/lib/kubelet/kubeconfig/"
    remote_src: yes

- name: "Install CA Certificate on the Workers"
  become: yes
  become_method: su
  copy:
    src: "~/ca.pem"
    dest: "/var/lib/kubernetes/"
    remote_src: yes

- name: "Create the Worker-0 Kubelet Configuration File"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
      kind: KubeletConfiguration
      apiVersion: kubelet.config.k8s.io/v1beta1
      authentication:
        anonymous:
          enabled: false
        webhook:
          enabled: true
        x509:
          clientCAFile: "/var/lib/kubernetes/ca.pem"
      authorization:
        mode: Webhook
      clusterDomain: "cluster.local"
      clusterDNS:
        - "10.32.0.10"
      podCIDR: "${pod-cidr}"
      resolvConf: "/run/systemd/resolve/resolv.conf"
      runtimeRequestTimeout: "15m"
      tlsCertFile: "/var/lib/kubelet/worker-0.pem"
      tlsPrivateKeyFile: "/var/lib/kubelet/worker-0-key.pem"
      EOF
  hosts: ${worker-0-dns}

- name: "Create the Worker-1 Kubelet Configuration File"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
      kind: KubeletConfiguration
      apiVersion: kubelet.config.k8s.io/v1beta1
      authentication:
        anonymous:
          enabled: false
        webhook:
          enabled: true
        x509:
          clientCAFile: "/var/lib/kubernetes/ca.pem"
      authorization:
        mode: Webhook
      clusterDomain: "cluster.local"
      clusterDNS:
        - "10.32.0.10"
      podCIDR: "${pod-cidr}"
      resolvConf: "/run/systemd/resolve/resolv.conf"
      runtimeRequestTimeout: "15m"
      tlsCertFile: "/var/lib/kubelet/worker-1.pem"
      tlsPrivateKeyFile: "/var/lib/kubelet/worker-1-key.pem"
      EOF
  hosts: ${worker-1-dns}

- name: "Create the Kubelet Systemd Unit File on the Workers"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
      [Unit]
      Description=Kubernetes Kubelet
      Documentation=https://github.com/kubernetes/kubernetes
      After=containerd.service
      Requires=containerd.service

      [Service]
      ExecStart=/usr/local/bin/kubelet \\
        --config=/var/lib/kubelet/kubelet-config.yaml \\
        --container-runtime=remote \\
        --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
        --image-pull-progress-deadline=2m \\
        --kubeconfig=/var/lib/kubelet/kubeconfig \\
        --network-plugin=cni \\
        --register-node=true \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: "Install the Kube Proxy KubeConfig file on the Workers"
  become: yes
  become_method: su
  copy:
    src: "~/kube-proxy.kubeconfig"
    dest: "/var/lib/kube-proxy/kubeconfig/"
    remote_src: yes

- name: "Create the Kube Proxy Systemd Unit File on the Workers"
  shell: 
    cmd: |
      cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
      [Unit]
      Description=Kubernetes Kube Proxy
      Documentation=https://github.com/kubernetes/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-proxy \\
        --config=/var/lib/kube-proxy/kube-proxy-config.yaml
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: "Starts the Worker Services"
  ansible.builtin.systemd:
    state: started
    name: "{{ item }}"
    daemon_reload: yes
    enabled: yes
  with_items:
    - "containerd" 
    - "kubelet"
    - "kube-proxy"

