stages:
  - check 
  - plan
  - apply
  - destroy

variables:
  BRANCH_STATE_KEY: $AWS_STATE_KEY-$CI_COMMIT_BRANCH
  CI_PROJECT_PATH: $CI_PROJECT_PATH

fmt_job:
  stage: check 
  tags:
    - shell
  script:
      - terraform fmt -check -recursive terraform/

validate_job:
  stage: check 
  tags:
    - shell
  script:
      - cd terraform
      - terraform init -input=false -backend-config="bucket=$AWS_STATE_BUCKET" -backend-config="key=$BRANCH_STATE_KEY" -backend-config="region=$AWS_REGION"
      - terraform validate 

plan_job:
  stage: plan 
  tags:
    - shell
  script:
      - cd terraform
      - terraform init -input=false -backend-config="bucket=$AWS_STATE_BUCKET" -backend-config="key=$BRANCH_STATE_KEY" -backend-config="region=$AWS_REGION"
      - terraform plan -input=false -out "planfile" -no-color >> planoutput.txt
  artifacts:
    paths:
      - terraform/planoutput.txt
      - terraform/planfile

apply_job:
  stage: apply
  tags:
    - shell
  script:
      - cd terraform
      - terraform init -input=false -backend-config="bucket=$AWS_STATE_BUCKET" -backend-config="key=$BRANCH_STATE_KEY" -backend-config="region=$AWS_REGION"
      - terraform apply -input=false -auto-approve "planfile"
  allow_failure: true
  artifacts:
    paths:
      - ansible/inventory.ini
      - ansible/roles/prepare-certs/tasks/main.yml 
      - ansible/roles/prepare-configs/tasks/main.yml
      - ansible/roles/etcd-config/tasks/main.yml
      - ansible/roles/control-plane/tasks/main.yml

destroy_job:
  stage: destroy
  tags:
    - shell
  script:
      - cd terraform
      - terraform init -input=false -backend-config="bucket=$AWS_STATE_BUCKET" -backend-config="key=$BRANCH_STATE_KEY" -backend-config="region=$AWS_REGION"
      - terraform destroy -input=false -auto-approve
  when: manual

 
